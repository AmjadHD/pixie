Mask	pixie/masks.html#Mask	masks: Mask	
newMask	pixie/masks.html#newMask,int,int	masks: newMask(width, height: int): Mask	
wh	pixie/masks.html#wh,Mask	masks: wh(mask: Mask): Vec2	
copy	pixie/masks.html#copy,Mask	masks: copy(mask: Mask): Mask	
`$`	pixie/masks.html#$,Mask	masks: `$`(mask: Mask): string	
inside	pixie/masks.html#inside,Mask,int,int	masks: inside(mask: Mask; x, y: int): bool	
dataIndex	pixie/masks.html#dataIndex,Mask,int,int	masks: dataIndex(mask: Mask; x, y: int): int	
getValueUnsafe	pixie/masks.html#getValueUnsafe,Mask,int,int	masks: getValueUnsafe(mask: Mask; x, y: int): uint8	
`[]`	pixie/masks.html#[],Mask,int,int	masks: `[]`(mask: Mask; x, y: int): uint8	
setValueUnsafe	pixie/masks.html#setValueUnsafe,Mask,int,int,uint8	masks: setValueUnsafe(mask: Mask; x, y: int; value: uint8)	
`[]=`	pixie/masks.html#[]=,Mask,int,int,uint8	masks: `[]=`(mask: Mask; x, y: int; value: uint8)	
minifyBy2	pixie/masks.html#minifyBy2,Mask,int	masks: minifyBy2(mask: Mask; power = 1): Mask	
fillUnsafe	pixie/masks.html#fillUnsafe,seq[uint8],uint8,int,int	masks: fillUnsafe(data: var seq[uint8]; value: uint8; start, len: int)	
fill	pixie/masks.html#fill,Mask,uint8	masks: fill(mask: Mask; value: uint8)	
getValueSmooth	pixie/masks.html#getValueSmooth,Mask,float32,float32	masks: getValueSmooth(mask: Mask; x, y: float32): uint8	
spread	pixie/masks.html#spread,Mask,float32	masks: spread(mask: Mask; spread: float32)	
ceil	pixie/masks.html#ceil,Mask	masks: ceil(mask: Mask)	
blur	pixie/masks.html#blur,Mask,float32,uint8	masks: blur(mask: Mask; radius: float32; outOfBounds: uint8 = 0)	
